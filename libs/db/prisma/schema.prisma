// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  user
  admin

  @@map("role")
}

enum AgeRating {
  zero
  six
  twelve
  sixteen
  eighteen

  @@map("age_rating")
}

model Users {
  id String @id

  email    String @unique
  password String

  avatarUrl String? @map("avatar_url")

  createdAt DateTime @default(now()) @map("created_at")

  role Role @default(user)

  posts         Posts[]    @relation("UserPosts")
  eventsCreated Events[]   @relation("UserEventsCreated")
  attends       Events[]   @relation("UserEventsAttending")
  comments      Comments[]
  tags          Tags[]     @relation("UserInterestingTags")
  file          File?      @relation(fields: [avatarUrl], references: [id])
  fileId        String?    @map("file_id")

  @@map("users")
}

model Rating {
  id String @id

  value Int

  @@map("ratings")
}

model Posts {
  id String @id

  fileId    String? @map("file_id")
  bannerUrl String? @map("banner_url")

  name    String
  content String

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  file      File?    @relation(fields: [fileId], references: [id])
  author    Users?   @relation("UserPosts", fields: [authorId], references: [id])
  authorId  String?  @map("author_id")

  tags Tags[] @relation("TagPosts")

  @@map("posts")
}

model Events {
  id String @id

  name        String
  description String
  bannerUrl   String?   @map("banner_url")
  startDate   DateTime  @map("start_date")
  location    String
  ageRating   AgeRating @map("age_rating")

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  author   Users?  @relation("UserEventsCreated", fields: [authorId], references: [id])
  authorId String? @map("author_id")

  participants Users[]    @relation("UserEventsAttending")
  tags         Tags[]     @relation("TagEvents")
  comments     Comments[]
  file         File?      @relation(fields: [fileId], references: [id])
  fileId       String?    @map("file_id")

  @@map("events")
}

model Tags {
  id String @id

  name String @unique

  posts  Posts[]  @relation("TagPosts")
  events Events[] @relation("TagEvents")
  Users  Users[]  @relation("UserInterestingTags")

  @@map("tags")
}

model Comments {
  id String @id

  content String?
  rating  Int     @default(5) @db.SmallInt
  user    Users   @relation(references: [id], fields: [userId])
  userId  String  @map("user_id")
  event   Events  @relation(references: [id], fields: [eventId])
  eventId String  @map("event_id")

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("comments")
}

model File {
  id            String   @id
  type          String   @db.VarChar(64)
  original_name String   @db.VarChar(64)
  region        String
  bucket        String
  url           String
  Events        Events[]
  Users         Users[]
  Posts         Posts[]

  @@map("files")
}
