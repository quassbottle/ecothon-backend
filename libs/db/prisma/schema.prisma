// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Gender {
  male
  female
  unknown

  @@map("gender")
}

enum Role {
  user
  host
  admin

  @@map("role")
}

enum AgeRating {
  zero
  six
  twelve
  sixteen
  eighteen

  @@map("age_rating")
}

model Users {
  id String @id

  email    String @unique
  password String

  createdAt DateTime @default(now()) @map("created_at")

  role      Role      @default(user)
  gender    Gender    @default(unknown)
  birthdate DateTime?
  latitude  Float?
  longitude Float?

  telegram       UserTelegram? @relation("TelegramUsers")
  comments       Comments[]
  eventsFavorite Events[]      @relation("UserEventsFavorite")
  posts          Posts[]       @relation("UserPosts")
  eventsCreated  Events[]      @relation("UserEventsCreated")
  attends        Events[]      @relation("UserEventsAttending")
  tags           Tags[]        @relation("UserInterestingTags")
  avatarUrl      String?       @map("avatar_url")

  @@map("users")
}

model Rating {
  id String @id

  value Int

  @@map("ratings")
}

model Posts {
  id String @id

  bannerUrl String? @map("banner_url")
  name      String
  content   String

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  author   Users?  @relation("UserPosts", fields: [authorId], references: [id])
  authorId String? @map("author_id")
  tags     Tags[]  @relation("TagPosts")

  @@map("posts")
}

model UserTelegram {
  userId           String @unique @map("user_id")
  telegramId       String @map("telegram_id")
  firstName        String @map("first_name")
  lastName         String @map("last_name")
  telegramHash     String @map("telegram_hash")
  telegramUsername String @map("telegram_username")
  user             Users? @relation("TelegramUsers", fields: [userId], references: [id])

  @@map("user_telegram")
}

model Events {
  id String @id

  name        String
  description String
  startDate   DateTime  @map("start_date")
  location    String
  ageRating   AgeRating @map("age_rating")
  bannerUrl   String?   @map("banner_url")
  latitude    Float
  longitude   Float
  createdAt   DateTime  @default(now()) @map("created_at")
  updatedAt   DateTime  @updatedAt @map("updated_at")

  author   Users?  @relation("UserEventsCreated", fields: [authorId], references: [id])
  authorId String? @map("author_id")

  participants  Users[]              @relation("UserEventsAttending")
  tags          Tags[]               @relation("TagEvents")
  comments      Comments[]
  usersFavorite Users[]              @relation("UserEventsFavorite")
  notifications EventNotifications[]

  @@map("events")
}

enum EventNotificationsType {
  WEEKLY

  @@map("event_notification_type")
}

model EventNotifications {
  id String @id

  event   Events                 @relation(references: [id], fields: [eventId])
  eventId String                 @map("event_id")
  type    EventNotificationsType

  @@map("event_notifications")
}

model Tags {
  id String @id

  name String @unique

  posts  Posts[]  @relation("TagPosts")
  events Events[] @relation("TagEvents")
  Users  Users[]  @relation("UserInterestingTags")

  @@map("tags")
}

model Comments {
  id String @id

  content String?
  rating  Int     @default(5) @db.SmallInt
  user    Users   @relation(references: [id], fields: [userId])
  userId  String  @map("user_id")
  event   Events  @relation(references: [id], fields: [eventId])
  eventId String  @map("event_id")

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("comments")
}

model File {
  id            String @id
  type          String @db.VarChar(64)
  original_name String @db.VarChar(64)
  region        String
  bucket        String
  url           String

  @@map("files")
}

model EventAnalyticsEvents {
  id String @id

  eventId String @map("event_id")

  userBirthdate DateTime? @map("user_birthdate")
  userGender    Gender?   @map("user_gender")
  userLatitude  Float?    @map("user_latitude")
  userLongitude Float?    @map("user_longitude")

  eventAgeRating AgeRating? @map("event_age_rating")
  eventType      EventType? @map("event_type")

  createdAt DateTime @default(now()) @map("created_at")

  @@map("event_analytics_events")
}

enum EventType {
  attend
  unattend
  favorite
  unfavorite
  comment

  @@map("event_types")
}
